/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/tencent/caelus/pkg/apis/cgroupnotifycrd/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CgroupNotifyCrdLister helps list CgroupNotifyCrds.
// All objects returned here must be treated as read-only.
type CgroupNotifyCrdLister interface {
	// List lists all CgroupNotifyCrds in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.CgroupNotifyCrd, err error)
	// CgroupNotifyCrds returns an object that can list and get CgroupNotifyCrds.
	CgroupNotifyCrds(namespace string) CgroupNotifyCrdNamespaceLister
	CgroupNotifyCrdListerExpansion
}

// cgroupNotifyCrdLister implements the CgroupNotifyCrdLister interface.
type cgroupNotifyCrdLister struct {
	indexer cache.Indexer
}

// NewCgroupNotifyCrdLister returns a new CgroupNotifyCrdLister.
func NewCgroupNotifyCrdLister(indexer cache.Indexer) CgroupNotifyCrdLister {
	return &cgroupNotifyCrdLister{indexer: indexer}
}

// List lists all CgroupNotifyCrds in the indexer.
func (s *cgroupNotifyCrdLister) List(selector labels.Selector) (ret []*v1.CgroupNotifyCrd, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.CgroupNotifyCrd))
	})
	return ret, err
}

// CgroupNotifyCrds returns an object that can list and get CgroupNotifyCrds.
func (s *cgroupNotifyCrdLister) CgroupNotifyCrds(namespace string) CgroupNotifyCrdNamespaceLister {
	return cgroupNotifyCrdNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CgroupNotifyCrdNamespaceLister helps list and get CgroupNotifyCrds.
// All objects returned here must be treated as read-only.
type CgroupNotifyCrdNamespaceLister interface {
	// List lists all CgroupNotifyCrds in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.CgroupNotifyCrd, err error)
	// Get retrieves the CgroupNotifyCrd from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.CgroupNotifyCrd, error)
	CgroupNotifyCrdNamespaceListerExpansion
}

// cgroupNotifyCrdNamespaceLister implements the CgroupNotifyCrdNamespaceLister
// interface.
type cgroupNotifyCrdNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CgroupNotifyCrds in the indexer for a given namespace.
func (s cgroupNotifyCrdNamespaceLister) List(selector labels.Selector) (ret []*v1.CgroupNotifyCrd, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.CgroupNotifyCrd))
	})
	return ret, err
}

// Get retrieves the CgroupNotifyCrd from the indexer for a given namespace and name.
func (s cgroupNotifyCrdNamespaceLister) Get(name string) (*v1.CgroupNotifyCrd, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("cgroupnotifycrd"), name)
	}
	return obj.(*v1.CgroupNotifyCrd), nil
}
